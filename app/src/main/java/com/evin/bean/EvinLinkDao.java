package com.evin.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVIN_LINK".
*/
public class EvinLinkDao extends AbstractDao<EvinLink, Void> {

    public static final String TABLENAME = "EVIN_LINK";

    public EvinLinkDao(DaoConfig config) {
        super(config);
    };


    public EvinLinkDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVIN_LINK\" (" + //
                "\"START\" INTEGER NOT NULL ," + // 0: start
                "\"END\" INTEGER NOT NULL ," + // 1: end
                "\"LINK_TYPE\" INTEGER NOT NULL ," + // 2: linkType
                "\"PATH\" TEXT," + // 3: path
                "\"TEXT\" TEXT NOT NULL );"); // 4: text
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVIN_LINK\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EvinLink entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStart());
        stmt.bindLong(2, entity.getEnd());
        stmt.bindLong(3, entity.getLinkType());

        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(4, path);
        }
        stmt.bindString(5, entity.getText());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /** @inheritdoc */
    @Override
    public EvinLink readEntity(Cursor cursor, int offset) {
        EvinLink entity = new EvinLink( //
            cursor.getInt(offset + 0), // start
            cursor.getInt(offset + 1), // end
                cursor.getInt(offset + 2), // linkType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // path
            cursor.getString(offset + 4) // text
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EvinLink entity, int offset) {
        entity.setStart(cursor.getInt(offset + 0));
        entity.setEnd(cursor.getInt(offset + 1));
        entity.setLinkType(cursor.getInt(offset + 2));
        entity.setPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setText(cursor.getString(offset + 4));
     }

    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EvinLink entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EvinLink entity) {
        return null;
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity EvinLink.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Start = new Property(0, int.class, "start", false, "START");
        public final static Property End = new Property(1, int.class, "end", false, "END");
        public final static Property LinkType = new Property(2, int.class, "linkType", false, "LINK_TYPE");
        public final static Property Path = new Property(3, String.class, "path", false, "PATH");
        public final static Property Text = new Property(4, String.class, "text", false, "TEXT");
    }

}
