package com.evin.bean;

import com.evin.bean.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "EVIN_IMAGE".
 */
public class EvinImage {

    private Long id;
    /**
     * 宽度
     */
    private int width;
    /**
     * 高度
     */
    private int height;
    /**
     * 类型 @link java.lang.Object
     */
    private int type;
    /**
     * 经度
     */
    private double latitude;
    /**
     * 纬度
     */
    private double longitude;
    /**
     * 路径
     */
    private String path;
    /**
     * 描述信息
     */
    private String info;
    /**
     * 中文地址
     */
    private String address;
    /**
     * 位置图像id
     */
    private long positionId;
    /**
     * 人物图像id
     */
    private Long userId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient EvinImageDao myDao;

    private EvinTime time;
    private Long time__resolvedKey;


    public EvinImage() {
    }

    public EvinImage(Long id) {
        this.id = id;
    }

    public EvinImage(Long id, int width, int height, int type, double latitude, double longitude, String path, String info, String address, long positionId, Long userId) {
        this.id = id;
        this.width = width;
        this.height = height;
        this.type = type;
        this.latitude = latitude;
        this.longitude = longitude;
        this.path = path;
        this.info = info;
        this.address = address;
        this.positionId = positionId;
        this.userId = userId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEvinImageDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public int getWidth() {
        return width;
    }

    public void setWidth(int width) {
        this.width = width;
    }

    public int getHeight() {
        return height;
    }

    public void setHeight(int height) {
        this.height = height;
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public double getLatitude() {
        return latitude;
    }

    public void setLatitude(double latitude) {
        this.latitude = latitude;
    }

    public double getLongitude() {
        return longitude;
    }

    public void setLongitude(double longitude) {
        this.longitude = longitude;
    }

    public String getPath() {
        return path;
    }

    public void setPath(String path) {
        this.path = path;
    }

    public String getInfo() {
        return info;
    }

    public void setInfo(String info) {
        this.info = info;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public long getPositionId() {
        return positionId;
    }

    public void setPositionId(long positionId) {
        this.positionId = positionId;
    }

    public Long getUserId() {
        return userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }

    /** To-one relationship, resolved on first access. */
    public EvinTime getTime() {
        Long __key = this.id;
        if (time__resolvedKey == null || !time__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EvinTimeDao targetDao = daoSession.getEvinTimeDao();
            EvinTime timeNew = targetDao.load(__key);
            synchronized (this) {
                time = timeNew;
            	time__resolvedKey = __key;
            }
        }
        return time;
    }

    public void setTime(EvinTime time) {
        synchronized (this) {
            this.time = time;
            id = time == null ? null : time.getId();
            time__resolvedKey = id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
