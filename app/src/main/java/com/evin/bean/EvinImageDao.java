package com.evin.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVIN_IMAGE".
*/
public class EvinImageDao extends AbstractDao<EvinImage, Long> {

    public static final String TABLENAME = "EVIN_IMAGE";
    private DaoSession daoSession;
    ;
    private Query<EvinImage> evinPosition_ImageListQuery;
    private Query<EvinImage> evinUser_UserImagesQuery;
    private Query<EvinImage> evinEvent_ImagesQuery;
    private String selectDeep;

    public EvinImageDao(DaoConfig config) {
        super(config);
    }
    
    public EvinImageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVIN_IMAGE\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"WIDTH\" INTEGER NOT NULL ," + // 1: width
                "\"HEIGHT\" INTEGER NOT NULL ," + // 2: height
                "\"TYPE\" TEXT," + // 3: type
                "\"LATITUDE\" REAL NOT NULL ," + // 4: latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 5: longitude
                "\"PATH\" TEXT," + // 6: path
                "\"INFO\" TEXT," + // 7: info
                "\"ADDRESS\" TEXT," + // 8: address
                "\"POSITION_ID\" INTEGER," + // 9: positionId
                "\"USER_ID\" INTEGER," + // 10: userId
                "\"EVENT_ID\" INTEGER);"); // 11: eventId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVIN_IMAGE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EvinImage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getWidth());
        stmt.bindLong(3, entity.getHeight());

        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
        stmt.bindDouble(5, entity.getLatitude());
        stmt.bindDouble(6, entity.getLongitude());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(7, path);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(8, info);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(9, address);
        }

        Long positionId = entity.getPositionId();
        if (positionId != null) {
            stmt.bindLong(10, positionId);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(11, userId);
        }

        Long eventId = entity.getEventId();
        if (eventId != null) {
            stmt.bindLong(12, eventId);
        }
    }

    @Override
    protected void attachEntity(EvinImage entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EvinImage readEntity(Cursor cursor, int offset) {
        EvinImage entity = new EvinImage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // width
            cursor.getInt(offset + 2), // height
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.getDouble(offset + 4), // latitude
            cursor.getDouble(offset + 5), // longitude
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // path
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // info
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // address
                cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // positionId
                cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // userId
                cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // eventId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EvinImage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWidth(cursor.getInt(offset + 1));
        entity.setHeight(cursor.getInt(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLatitude(cursor.getDouble(offset + 4));
        entity.setLongitude(cursor.getDouble(offset + 5));
        entity.setPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setInfo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAddress(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPositionId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setUserId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setEventId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EvinImage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EvinImage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "imageList" to-many relationship of EvinPosition. */
    public List<EvinImage> _queryEvinPosition_ImageList(Long positionId) {
        synchronized (this) {
            if (evinPosition_ImageListQuery == null) {
                QueryBuilder<EvinImage> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PositionId.eq(null));
                evinPosition_ImageListQuery = queryBuilder.build();
            }
        }
        Query<EvinImage> query = evinPosition_ImageListQuery.forCurrentThread();
        query.setParameter(0, positionId);
        return query.list();
    }

    /** Internal query to resolve the "userImages" to-many relationship of EvinUser. */
    public List<EvinImage> _queryEvinUser_UserImages(Long userId) {
        synchronized (this) {
            if (evinUser_UserImagesQuery == null) {
                QueryBuilder<EvinImage> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                evinUser_UserImagesQuery = queryBuilder.build();
            }
        }
        Query<EvinImage> query = evinUser_UserImagesQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

    /**
     * Internal query to resolve the "images" to-many relationship of EvinEvent.
     */
    public List<EvinImage> _queryEvinEvent_Images(Long eventId) {
        synchronized (this) {
            if (evinEvent_ImagesQuery == null) {
                QueryBuilder<EvinImage> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.EventId.eq(null));
                evinEvent_ImagesQuery = queryBuilder.build();
            }
        }
        Query<EvinImage> query = evinEvent_ImagesQuery.forCurrentThread();
        query.setParameter(0, eventId);
        return query.list();
    }

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getEvinTimeDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getEvinEventDao().getAllColumns());
            builder.append(" FROM EVIN_IMAGE T");
            builder.append(" LEFT JOIN EVIN_TIME T0 ON T.\"ID\"=T0.\"ID\"");
            builder.append(" LEFT JOIN EVIN_EVENT T1 ON T.\"EVENT_ID\"=T1.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }

    protected EvinImage loadCurrentDeep(Cursor cursor, boolean lock) {
        EvinImage entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        EvinTime time = loadCurrentOther(daoSession.getEvinTimeDao(), cursor, offset);
        entity.setTime(time);
        offset += daoSession.getEvinTimeDao().getAllColumns().length;

        EvinEvent evinEvent = loadCurrentOther(daoSession.getEvinEventDao(), cursor, offset);
        entity.setEvinEvent(evinEvent);

        return entity;
    }
    
    public EvinImage loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();

        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);

        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }

    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<EvinImage> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<EvinImage> list = new ArrayList<EvinImage>(count);

        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<EvinImage> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    
    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<EvinImage> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }

    /**
     * Properties of entity EvinImage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Width = new Property(1, int.class, "width", false, "WIDTH");
        public final static Property Height = new Property(2, int.class, "height", false, "HEIGHT");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Latitude = new Property(4, double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(5, double.class, "longitude", false, "LONGITUDE");
        public final static Property Path = new Property(6, String.class, "path", false, "PATH");
        public final static Property Info = new Property(7, String.class, "info", false, "INFO");
        public final static Property Address = new Property(8, String.class, "address", false, "ADDRESS");
        public final static Property PositionId = new Property(9, Long.class, "positionId", false, "POSITION_ID");
        public final static Property UserId = new Property(10, Long.class, "userId", false, "USER_ID");
        public final static Property EventId = new Property(11, Long.class, "eventId", false, "EVENT_ID");
    }
 
}
